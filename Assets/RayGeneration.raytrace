#include "HLSLSupport.cginc"
#include "UnityRaytracingMeshUtils.cginc"
#include "UnityShaderVariables.cginc"

#pragma max_recursion_depth 1

RaytracingAccelerationStructure _ras: register(t0);
RWTexture2D<float4> _dxrTarget;

float4x4 _CameraToWorld;
float4x4 _InverseProjection;

struct Payload
{
    float4 color;
};


[shader("raygeneration")]
void RaygenShader()
{
    uint3 dispatchIdx = DispatchRaysIndex();
    uint3 dispatchDim = DispatchRaysDimensions();
    
    float2 texcoord = (dispatchIdx.xy + float2(0.5, 0.5)) / float2(dispatchDim.x, dispatchDim.y);
    float3 viewPosition = float3(texcoord * 2.0 - float2(1.0, 1.0), 0.0);
    
    float4 clip = float4(viewPosition.xyz, 1.0);
    float4 viewPos = mul(_InverseProjection, clip);
    viewPos.xyz /= viewPos.w;
    
    float3 worldPos = mul(_CameraToWorld, viewPos);
    float3 worldDirection = worldPos - _WorldSpaceCameraPos;
    
    RayDesc ray;
    ray.Origin = _WorldSpaceCameraPos; 
    ray.Direction = worldDirection; 
    ray.TMin = 0;
    ray.TMax = 10000;
    
    Payload payload;
    payload.color = float4(0, 0, 0, 0);
    
    TraceRay(_ras, 0, 0xFFFFFFF, 0, 1, 0, ray, payload);
    
    _dxrTarget[dispatchIdx.xy] = payload.color;
}

[shader("miss")]
void MissShader(inout Payload payload: SV_RayPayload)
{
    payload.color = 0;
}
