#include "HLSLSupport.cginc"
#include "UnityRaytracingMeshUtils.cginc"
#include "UnityShaderVariables.cginc"
#include "Common.cginc"

#pragma max_recursion_depth 8

RWTexture2D<float4> _dxrTarget;

float4x4 _CameraToWorld;
float4x4 _InverseProjection;

float4 _lowerSkyColor;
float4 _upperSkyColor;

int seed;
int sampleCount;


[shader("raygeneration")]
void RaygenShader()
{
    uint3 dispatchIdx = DispatchRaysIndex();
    uint3 dispatchDim = DispatchRaysDimensions();
    
    uint raySeed = initRand(dispatchIdx.x + dispatchIdx.y * dispatchDim.x, seed);
    
    float2 texcoord = (dispatchIdx.xy + float2(0.5, 0.5)) / float2(dispatchDim.x, dispatchDim.y);
    float3 viewPosition = float3(texcoord * 2.0 - float2(1.0, 1.0), 0.0);
    
    float4 clip = float4(viewPosition.xyz, 1.0);
    float4 viewPos = mul(_InverseProjection, clip);
    viewPos.xyz /= viewPos.w;
    
    float3 worldPos = mul(_CameraToWorld, viewPos);
    float3 worldDirection = worldPos - _WorldSpaceCameraPos;
    
    RayDesc ray;
    ray.Origin = _WorldSpaceCameraPos; 
    ray.Direction = worldDirection; 
    ray.TMin = 0;
    ray.TMax = 10000;
    
    Payload payload;
    payload.color = float4(0, 0, 0, 1);
    payload.depth = 0;
    payload.seed = raySeed;
    payload.flag = CAMERA_RAY_FLAG;
    
    
    float4 sampleTotal = float4(0,0,0,0);
    int i;
    for(i = 0; i < sampleCount; i++)
    {
        TraceRay(_ras, 0, 0xFFFFFFF, 0, 1, 0, ray, payload);
        sampleTotal += payload.color;
        
        if (payload.depth == 0)
            break;
    }
    
    _dxrTarget[dispatchIdx.xy] = sampleTotal / (i + 1);
}

[shader("miss")]
void MissShader(inout Payload payload: SV_RayPayload)
{
    if (payload.flag == LIGHT_FEELER_FLAG)
        return;

    float3 rayDir = normalize(WorldRayDirection());
    payload.color = lerp(_lowerSkyColor, _upperSkyColor, rayDir.y * 0.5 + 0.5);
}
